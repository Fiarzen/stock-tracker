class StockTracker {
    constructor() {
        this.apiKey = '';
        this.initializeEventListeners();
        
    }

    /**
     * Initialize all event listeners for the application
     */
    initializeEventListeners() {
        const form = document.getElementById('stockForm');
        const apiKeyInput = document.getElementById('apiKey');
        
        // Handle form submission
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleSearch();
        });

        // Update API key when user types
        apiKeyInput.addEventListener('input', (e) => {
            this.apiKey = e.target.value.trim();
        });

        // Allow Enter key in symbol input
        document.getElementById('stockSymbol').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                this.handleSearch();
            }
        });
    }

    /**
     * Handle stock search submission
     */
    async handleSearch() {
        const symbol = document.getElementById('stockSymbol').value.trim().toUpperCase();
        
        if (!symbol) {
            this.showError('Please enter a stock symbol');
            return;
        }

        console.log('Searching for symbol:', symbol);
        
        this.addToRecentSearches(symbol);
        this.showLoading();
        this.hideError();

        try {
            const stockData = await this.fetchStockData(symbol);
            console.log('Stock data received:', stockData);
            this.displayStockData(stockData);
        } catch (error) {
            console.error('Search error:', error);
            this.showError(error.message);
        } finally {
            this.hideLoading();
        }
    }

    /**
     * Fetch stock data from serverless backend or fallback to demo
     * @param {string} symbol - Stock symbol to fetch
     * @returns {Object} Formatted stock data
     */
    async fetchStockData(symbol) {
        // Try serverless backend first (API key is secure on server)
        try {
            const backendUrl = `/api/stock?symbol=${symbol}`;
            const response = await fetch(backendUrl);
            
            if (response.ok) {
                const data = await response.json();
                return this.formatBackendData(data);
            } else {
                const error = await response.json();
                throw new Error(error.error || 'Backend error');
            }
        } catch (error) {
            console.log('Backend not available:', error.message);
            
            // If backend fails, check if user provided API key for direct access
            if (this.apiKey) {
                console.log('Trying direct API access...');
                return this.fetchFromAlphaVantage(symbol);
            }
            
            // Final fallback to demo data
            console.log('Using demo data...');
            return this.getDemoData(symbol);
        }
    }

    /**
     * Fetch directly from Alpha Vantage API
     * @param {string} symbol - Stock symbol to fetch
     * @returns {Object} Formatted stock data
     */
    async fetchFromAlphaVantage(symbol) {
        const url = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${this.apiKey}`;
        
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error('Failed to fetch stock data');
        }

        const data = await response.json();
        
        // Check for API errors
        if (data['Error Message']) {
            throw new Error('Invalid stock symbol');
        }
        
        if (data['Note']) {
            throw new Error('API rate limit exceeded. Please try again later.');
        }

        const quote = data['Global Quote'];
        if (!quote || Object.keys(quote).length === 0) {
            throw new Error('No data found for this symbol');
        }

        return this.formatAlphaVantageData(quote);
    }

    /**
     * Generate demo data for testing without API key
     * @param {string} symbol - Stock symbol
     * @returns {Promise<Object>} Demo stock data
     */
    getDemoData(symbol) {
        // Simulate API delay for realistic experience
        return new Promise((resolve) => {
            setTimeout(() => {
                const demoData = {
                    'AAPL': {
                        symbol: 'AAPL',
                        name: 'Apple Inc.',
                        price: '150.25',
                        change: '+2.15',
                        changePercent: '+1.45%',
                        volume: '52,478,900',
                        high: '152.10',
                        low: '148.50',
                        open: '149.00'
                    },
                    'GOOGL': {
                        symbol: 'GOOGL',
                        name: 'Alphabet Inc. Class A',
                        price: '2,750.80',
                        change: '-15.25',
                        changePercent: '-0.55%',
                        volume: '1,234,567',
                        high: '2,780.00',
                        low: '2,745.50',
                        open: '2,765.00'
                    },
                    'MSFT': {
                        symbol: 'MSFT',
                        name: 'Microsoft Corporation',
                        price: '305.42',
                        change: '+3.78',
                        changePercent: '+1.25%',
                        volume: '28,567,890',
                        high: '307.25',
                        low: '302.15',
                        open: '303.50'
                    }
                };

                // Return predefined data or generate random data
                const stock = demoData[symbol] || {
                    symbol: symbol,
                    name: `${symbol} Corporation`,
                    price: (Math.random() * 1000 + 50).toFixed(2),
                    change: (Math.random() * 20 - 10).toFixed(2),
                    changePercent: ((Math.random() * 6 - 3).toFixed(2)) + '%',
                    volume: Math.floor(Math.random() * 50000000).toLocaleString(),
                    high: (Math.random() * 1000 + 60).toFixed(2),
                    low: (Math.random() * 1000 + 40).toFixed(2),
                    open: (Math.random() * 1000 + 45).toFixed(2)
                };

                resolve(stock);
            }, 1500); // 1.5 second delay to simulate API call
        });
    }

    /**
     * Format backend API response data
     * @param {Object} data - Backend response data
     * @returns {Object} Formatted stock data
     */
    formatBackendData(data) {
        const change = parseFloat(data.change);
        return {
            symbol: data.symbol,
            name: data.name,
            price: data.price,
            change: (change >= 0 ? '+' : '') + data.change,
            changePercent: data.changePercent,
            volume: data.volume,
            high: data.high,
            low: data.low,
            open: data.open
        };
    }
    formatAlphaVantageData(quote) {
        const price = parseFloat(quote['05. price']);
        const change = parseFloat(quote['09. change']);
        const changePercent = quote['10. change percent'].replace('%', '');

        return {
            symbol: quote['01. symbol'],
            name: `${quote['01. symbol']} Corporation`, // Alpha Vantage doesn't provide company names in global quote
            price: price.toFixed(2),
            change: (change >= 0 ? '+' : '') + change.toFixed(2),
            changePercent: (parseFloat(changePercent) >= 0 ? '+' : '') + parseFloat(changePercent).toFixed(2) + '%',
            volume: parseInt(quote['06. volume']).toLocaleString(),
            high: parseFloat(quote['03. high']).toFixed(2),
            low: parseFloat(quote['04. low']).toFixed(2),
            open: parseFloat(quote['02. open']).toFixed(2)
        };
    }

    /**
     * Display stock data in the UI
     * @param {Object} data - Formatted stock data
     */
    displayStockData(data) {
        const isPositive = parseFloat(data.change) >= 0;
        const changeClass = isPositive ? 'positive' : 'negative';
        const changeIcon = isPositive ? '📈' : '📉';

        const stockHTML = `
            <div class="stock-card">
                <div class="stock-header">
                    <div>
                        <div class="stock-symbol">${data.symbol}</div>
                        <div class="stock-name">${data.name}</div>
                    </div>
                    <div class="stock-price ${changeClass}">$${data.price}</div>
                </div>
                
                <div class="stock-details">
                    <div class="detail-item">
                        <div class="detail-label">Change</div>
                        <div class="detail-value ${changeClass}">
                            ${changeIcon} ${data.change}
                        </div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Change %</div>
                        <div class="detail-value ${changeClass}">${data.changePercent}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Volume</div>
                        <div class="detail-value">${data.volume}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Day High</div>
                        <div class="detail-value">$${data.high}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Day Low</div>
                        <div class="detail-value">$${data.low}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Open</div>
                        <div class="detail-value">$${data.open}</div>
                    </div>
                </div>
            </div>
        `;

        document.getElementById('stockContainer').innerHTML = stockHTML;
    }

    /**
     * Show loading spinner and disable search button
     */
    showLoading() {
        document.getElementById('loadingContainer').style.display = 'block';
        document.getElementById('stockContainer').innerHTML = '';
        document.getElementById('searchBtn').disabled = true;
    }

    /**
     * Hide loading spinner and enable search button
     */
    hideLoading() {
        document.getElementById('loadingContainer').style.display = 'none';
        document.getElementById('searchBtn').disabled = false;
    }

    /**
     * Display error message to user
     * @param {string} message - Error message to display
     */
    showError(message) {
        const errorHTML = `<div class="error">❌ ${message}</div>`;
        document.getElementById('errorContainer').innerHTML = errorHTML;
        document.getElementById('errorContainer').style.display = 'block';
    }

    /**
     * Hide error message
     */
    hideError() {
        document.getElementById('errorContainer').style.display = 'none';
    }

    /**
     * Add stock symbol to recent searches
     * @param {string} symbol - Stock symbol to add
     */


}
// Initialize the application when DOM is fully loaded
document.addEventListener('DOMContentLoaded', () => {
    // Create global instance for onclick handlers to access
    window.stockTracker = new StockTracker();
    
    console.log('Stock Tracker initialized successfully!');
});